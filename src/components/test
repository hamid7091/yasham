// A custom hook that returns a function to reset the states
const useResetState = (initialState) => {
  const [state, setState] = React.useState(initialState);
  const resetState = () => setState(initialState);
  return [state, setState, resetState];
};

// A component that renders the summary cards and the popup
const CardList = () => {
  const [showPopup, setShowPopup] = React.useState(false);
  const [selectedPerson, setSelectedPerson] = React.useState(null);
  const [people, setPeople] = useState([]);

  // A function that toggles the popup visibility and sets the selected person
  const handleEdit = (person) => {
    setShowPopup(!showPopup);
    setSelectedPerson(person);
  };

  // A function that adds a new person to the list
  const handleAdd = () => {
    setShowPopup(true);
    setSelectedPerson(null);
  };
  // A function that updates the people state with the edited or added person const
  handleUpdate = (person) => {
    // Find the index of the person with the same id as the edited or added person
    const index = people.findIndex((p) => p.id === person.id);
    // If the index is not -1, it means the person already exists in the list
    if (index !== -1) {
      // Create a copy of the people array
      const newPeople = [...people];

      // Replace the person at the index with the edited person
      newPeople[index] = person;

      // Set the people state to the new array
      setPeople(newPeople);
    } else {
      // If the index is -1, it means the person is new and needs to be added to the list
      // Generate a random id for the new person
      const id = Math.floor(Math.random() * 1000);

      // Create a new object with the id and the other properties from the person parameter
      const newPerson = { id, ...person };

      // Set the people state to a new array with the new person appended
      setPeople([...people, newPerson]);
    }
  };

  return (
    <div className="card-list">
      <h1>People List</h1>
      {/* Render the cards */}
      <div>
        {people.map((person) => (
          <div key={person.id} className="card">
            <h3>{person.name}</h3>
            <p>Age: {person.age}</p>
            <p>Gender: {person.gender}</p>
            <button onClick={() => handleEdit(person)}>Edit</button>
          </div>
        ))}
      </div>
      {/* Render the popup with the selected person or an empty object */}
      {showPopup && (
        <Popup
          person={selectedPerson || { id: "", name: "", age: 0, gender: "" }}
          onUpdate={handleUpdate}
        />
      )}
      {/* Render the button to add a new person */}
      <button onClick={handleAdd}>Add</button>
    </div>
  );
};

// A component that uses the custom hook and the person prop
const Popup = ({ person, onUpdate }) => {
  // Use the custom hook for each state and initialize them with the person prop
  const [name, setName, resetName] = useResetState(person.name);
  const [age, setAge, resetAge] = useResetState(person.age);
  const [gender, setGender, resetGender] = useResetState(person.gender);

  // A function that sets the final object and clears the states
  const handleSubmit = () => {
    // Set the final object with the state values
    const person = { name, age, gender };
    console.log(person);

    // Call the onUpdate function from the props with the final object as an argument
    onUpdate(person);

    // Clear the states by calling the reset functions
    resetName();
    resetAge();
    resetGender();
  };

  return (
    <div className="popup">
      <input value={name} onChange={(e) => setName(e.target.value)} />
      <input value={age} onChange={(e) => setAge(e.target.value)} />
      <input value={gender} onChange={(e) => setGender(e.target.value)} />
      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
};
